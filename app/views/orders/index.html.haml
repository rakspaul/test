#order_layout.pure-g
  #details.pure-u
    .content

.orders-content
  .orders-header
    .pure-g.header-filter
      %form.filter-form
        .pure-u
          .control-group.search-control
            .input-append
              %input{type: "text", placeholder: "Search", id: "get_search_query"}
              %a.btn.add-on#btn_search_orders Search
        - unless current_user.agency_user?
          .pure-u
            .control-group.orders-control
              %label.control-label
                #{localised(identifier+'.campaigns')}
              .controls
                %select.filter-orders#orders_by_user
                  %option{:value => "my_orders"} #{localised(identifier+'.my_orders')}
                  %option{:value => "all_orders"} #{localised(identifier+'.all_orders')}
        .pure-u
          .control-group.status-control
            %label.control-label
              Status
            .controls
              %select.filter-orders.status
                %option{:value => "all"} All
                %option{:value => "proposed"} Proposed
                %option{:value => "draft"} Draft
                %option{:value => "ready_for_trafficker"} Ready for Trafficker
                %option{:value => "ready_for_am"} Ready for AM
                %option{:value => "pushing"} Pushing
                %option{:value => "pushed"} Pushed
                %option{:value => "incomplete_push"} Incomplete Push
                %option{:value => "failure"} Failure
                %option{:value => "delivering"} Delivering
                %option{:value => "completed"} Completed
        - unless current_user.agency_user?
          .pure-u
            .control-group.status-control
              - unless domain_desk?
                %label.control-label
                  Client
                .controls
                  %select.filter-orders.rc
                    %option All
                    - @rc.each do |rc|
                      %option{:value => rc.name}
                        = "#{rc.name}"
          .pure-u
            .control-group
              %label.control-label
                Account Manager
              .controls
                %select.filter-orders.am
                  %option All
                  - @users.each do |user|
                    %option{:value => user.id}
                      = "#{user.first_name} #{user.last_name} - #{user.email}"
          .pure-u
            .control-group
              %label.control-label
                Trafficker
              .controls
                %select.filter-orders.trafficker
                  %option All
                  - @users.each do |user|
                    %option{:value => user.id}
                      = "#{user.first_name} #{user.last_name} - #{user.email}"

    .pure-g.btn-delete
      .pure-u
        - unless current_user.agency_user?
          %button.btn#btn_delete_orders{type: "button"} Delete

  .orders-list
    %table.orders-table
      %thead
        %tr
          - table_columns.each do |col|
            %th{class: "#{col[:size]}"}
              .pure-g.header-container
                .pure-u.title-container
                  .title
                    = col[:column]
                - if col[:sortable]
                  = sort_icon(col, @sort_field, @sort_direction)

      %tbody{:id => "orders"}
        =render "order_table" ,:orders => @orders

    .paginator{:id => "paginator"}
      = paginate @orders,:remote => :true

:javascript
  $(document).ready(function() {
    ReachUI.SetupGlobalErrorHandler();

    if (!#{current_user.agency_user?}){
      var controller = new ReachUI.Orders.OrderController();
      ReachUI.Orders.router = new ReachUI.Orders.Router({controller: controller});
    }

    $('body').tooltip({
      selector: '[rel=tooltip]'
    });


    Backbone.history.start({
      //pushState: true,
      pushState: false,
      root: "/orders"
    });
  });

  $('.actions-container i').click(function(event) {
    var para = {};
    para.sort_column = $(event.target).parent().attr('id');

    var class_name = $(event.target).attr('class');

    if(class_name==='icon-sort' || class_name==='icon-sort-by-attributes-alt') {
      para.sort_direction = 'asc';
      $('.orders-table').find('.actions-container i').removeClass('icon-sort-by-attributes icon-sort-by-attributes-alt').addClass('icon-sort');
      $(event.target).removeClass('icon-sort-by-attributes-alt icon-sort').addClass('icon-sort-by-attributes');
    } else if(class_name==='icon-sort-by-attributes') {
      para.sort_direction = 'desc';
      $(event.target).removeClass('icon-sort-by-attributes').addClass('icon-sort-by-attributes-alt');
    }

    var filterParams = getFilterParams();
    var searchParams = getSearchParams();
    $.extend(para, filterParams, searchParams);

    var request = $.ajax({url:'/orders', data:para, dataType: 'script'});
  });

  $('#btn_delete_orders').click(function(event) {
    var para = {};

    var checkedValues = $('.ordersCheckbox:checked').map(function() {return this.value;}).get().join(',');
    para.chkVals = checkedValues;
    var sortColumn = $('.actions-container i.icon-sort-by-attributes');
    if(!sortColumn.length) sortColumn = $('.actions-container i.icon-sort-by-attributes-alt');

    if(sortColumn){
      para.sort_column = sortColumn.parent().attr('id');
      para.sort_direction = sortColumn.hasClass('icon-sort-by-attributes') ? "asc" : "desc";
    }

    if(checkedValues == '') {
      alert("No order selected");
    } else {
      var orderNames = [];
      $('.ordersCheckbox:checked').each(function() {
        orderNames.push($.trim($(this).parent().nextAll().find('.order-title a').html()));
      });
      var cfm = confirm("Are you sure you want to delete the following Orders: \n\n" + orderNames.join("\n"));
      if(cfm === true) {
        var request = $.ajax({url:'/orders/delete.json', type:'DELETE', data:"ids="+checkedValues});
        request.done(function(data){
          var request = $.ajax({url:'/orders', data:para, dataType: 'script'});
        });

        request.fail(function(){
          alert( "Request failed");
        });
      }
    }
  });

  $('.filter-orders').change(function(event) {
   sendRequest();
  });

  $('#btn_search_orders').click(function(event) {
    sendRequest();
  });

  $('#get_search_query').keypress(function(e) {
    if ( e.which == 13 ) {
      e.preventDefault();
      sendRequest();
    }
  });

  function sendRequest(){
    var para = {};
    para = getFilterParams();
    var sortParams = getSortParams();
    var searchParams = getSearchParams();
    $.extend(para, sortParams, searchParams);

    var request = $.ajax({url:'/orders', data:para, dataType: 'script'});
  }

  function getFilterParams(){
    var filterParams = {},
        status= $('.status').val().toLowerCase(),
        am = $('.am').val(),
        trafficker = $('.trafficker').val(),
        rc = $('.rc').val();

    if(status === "all") { status = null }
    if(am === "All") { am = null }
    if(trafficker == "All") { trafficker = null }
    if(rc == "All") { rc = null }

    if(status){
      filterParams.status = status;
    }
    if(am){
      filterParams.account_manager = am;
    }
    if(trafficker){
      filterParams.trafficker = trafficker;
    }
    if(rc){
      filterParams.reach_client = rc;
    }

    orders_by_user = $('#orders_by_user').val();
    filterParams.my_orders = orders_by_user === "my_orders";

    return filterParams;
  }

  function getSortParams(){
    var sortParams = {};
    var sortColumn = $('.actions-container i.icon-sort-by-attributes');
    if(!sortColumn.length) sortColumn = $('.actions-container i.icon-sort-by-attributes-alt');

    if(sortColumn){
      sortParams.sort_column = sortColumn.parent().attr('id');
      sortParams.sort_direction = sortColumn.hasClass('icon-sort-by-attributes') ? "asc" : "desc";
    }

    return sortParams;
  }

  function getSearchParams(){
    var para = {};
    _search_query = $('#get_search_query').val();
    if(_search_query) {
      para.search_query = _search_query;
    }

    return para;
  }
